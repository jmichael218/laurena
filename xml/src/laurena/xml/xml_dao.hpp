///
/// \file     xml_dao.hpp
/// \brief    dao for a xml file based persistance engine
/// \author   Frederic Manisse
/// \version  1.0
///
/// dao for a xml file based persistance engine
///
#ifndef LAURENA_XML_DAO_H
#define LAURENA_XML_DAO_H

/********************************************************************************/
/*                      pragma once support                                     */ 
/********************************************************************************/ 
#if defined(_MSC_VER) && (_MSC_VER >= 1020)
# pragma once
#endif

/********************************************************************************/ 
/*              dependencies                                                    */ 
/********************************************************************************/ 
#include <laurena/laurena.hpp>

/********************************************************************************/ 
/*              opening namespace(s)                                            */ 
/********************************************************************************/ 
namespace laurena {
namespace xml {

/***********************************************************************************/ 
/* Class mdl_dao                                                                   */ 
/***********************************************************************************/ 

class xml_dao : public file_dao
{
public:

    /****************************************************************************/ 
    /*          typedef                                                         */ 
    /****************************************************************************/ 
    typedef std::shared_ptr<xml_dao>       sptr;

    /****************************************************************************/ 
    /*          destructor, constructors                                        */ 
    /****************************************************************************/ 
    xml_dao (const descriptor& desc, const std::string& directory);
    virtual ~xml_dao();

    /****************************************************************************/ 
    /*          new virtual functions                                           */ 
    /****************************************************************************/ 
    // return file extension
    virtual const std::string&          extension ();
    virtual std::shared_ptr<oarchive>   formatter ();
    virtual std::shared_ptr<iarchive>   parser    ();
};

/********************************************************************************/ 
/*          bottom file block                                                   */ 
/********************************************************************************/ 

}}
#endif
//end of file